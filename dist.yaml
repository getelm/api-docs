openapi: 3.0.1
servers:
  - url: https://api.getelm.co
    description: Live API server
info:
  title: Elm API
  version: 1.0.0
  contact:
    name: Contact
    email: hello@getelm.co
  termsOfService: https://getelm.co/terms-of-service/
  description: >
    # Introduction

    The elm API has been designed in order to give users access to our collected
    database of user information.

    # API Keys

    This API relies on an API key for authentication. To generate/access your
    API key please make sure that you have opted into the beta by speaking with
    a representative from Elm and that you have admin level access to your Elm
    account. 


    Log in to your account, navigate to Account Settings and click on the API
    tab. On this page you will be able to generate an API key, view your key,
    and regenerate your key if your existing one is lost or exposed.


    Please note that API keys are sensitive pieces of information and as such
    should be kept secret, like a password.


    # Authentication

    Once you have your API key, you can use it for authentication by including
    it in the authorization header of your requests.

    **Headers**

    ```

    Authorization: Token <your token>

    ```

    ## Example request

    This request can be used to test your connection to the API. A successful
    request and authorization will return `{"success":true}`

    ```

    curl --request GET \
      --url https://api.getelm.co/api/test/ \
      --header 'Authorization: <your token>'
    ```
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
  schemas:
    errorServer:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating that the query was unsuccessful
        error:
          type: string
          description: Error message
      example:
        success: false
        error: Server error. Please review your request and try again
    errorUnauthorized:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating that the query was unsuccessful
        error:
          type: string
          description: Error message
      example:
        success: false
        error: Invalid credentials
    errorBeta:
      type: object
      properties:
        success:
          type: boolean
          description: A boolean indicating that the query was unsuccessful
        error:
          type: string
          description: Error message
      example:
        success: false
        error: You do not have access to the API beta
    action:
      type: object
      properties:
        client_name:
          type: string
          description: The client name.
        alert_date:
          type: string
          description: The date of the alert.
        sku_code:
          type: string
          description: The SKU code.
        sku_description:
          type: string
          description: The SKU name.
        retailer:
          type: string
          description: The retailer name.
        store_id:
          type: string
          description: The store id.
        store_description:
          type: string
          description: The store name.
        action:
          type: string
          description: The action.
        action_description:
          type: string
          description: The action description.
      example:
        client_name: myCompany
        alert_date: '2022-08-15T23:00:00.000Z'
        sku_code: 33453
        sku_description: 33453 - myCompany greatProduct
        retailer: tesco
        store_id: 1111
        store_description: 3322 London
        action: no_sales
        action_description: No sales recorded for this SKU in 4 weeks
  parameters:
    retailerParam:
      in: query
      name: retailer
      required: true
      schema:
        type: string
      description: Name of retailer to pull data from
      example: sainsburys
security:
  - ApiKeyAuth: []
paths:
  /test:
    summary: Test your connection and credentials
    description: >-
      A simple path that can be used to test that you are correctly applying
      your credentials
    get:
      summary: Test your connection
      description: >-
        Test that you are correctly connecting to the API. Will return a success
        or error message accordingly
      operationId: test_connection
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: A boolean indicating that the query was successful
                example:
                  success: true
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthorized'
        '403':
          description: No beta access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorBeta'
        default:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorServer'
      tags:
        - test
  /actions:
    summary: Get all actions
    description: Returns a list of all available actions for the current user
    get:
      summary: Get all actions by retailer
      description: >-
        Returns a list of all available actions and accompanying information by
        retailer
      parameters:
        - $ref: '#/components/parameters/retailerParam'
      operationId: get_actions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/action'
        '401':
          description: Object indicating an unsuccesful query, with error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthorized'
        default:
          description: Object indicating an unsuccesful query, with error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthorized'
      tags:
        - actions
  /data/retailers:
    summary: Get available retailers
    description: Returns a list of retailers that the user has access to
    get:
      summary: Get available retailers
      description: Returns a list of retailers that the user has access to
      operationId: get_retailers
      responses:
        default:
          description: Default error sample response
      tags:
        - general
  /data/store:
    summary: Return store data
    get:
      summary: ''
      parameters:
        - $ref: '#/components/parameters/retailerParam'
        - in: query
          name: timeframe
          required: true
          schema:
            type: string
            enum:
              - week
          example: timeframe=week
          description: Time incremement for returned data
        - in: query
          name: metric
          required: true
          schema:
            type: string
            enum:
              - units
              - revenue
              - wastage
              - stock
              - lostsales
          description: |
            Which metric(s) should be returned
      description: ''
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - data
  /data/sku:
    summary: Return sku data
    get:
      summary: ''
      parameters:
        - $ref: '#/components/parameters/retailerParam'
        - in: query
          name: timeframe
          required: true
          schema:
            type: string
            enum:
              - daily
              - week
          example: timeframe=daily
          description: Time incremement for returned data
        - in: query
          name: metric
          required: true
          schema:
            type: string
            enum:
              - units
              - revenue
              - wastage
              - stock
              - availability
              - ros
              - scanningros
              - rangedstores
              - storesselling
              - storeswithstock
              - storeswithsales
          description: >
            Which metric(s) should be returned. Please note that not all metrics
            are available depending on retailer//timeframe selections. In
            general when timeframe is daily: units, revenue, wastage, and
            availability can be selected, and when timeframe is weekly: ros,
            scanningros, rangedstores, storesselling, storesselling,
            storesselling, storesselling, storeswithstock, storeswithsales can
            be selected.
      description: ''
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - data
