summary: Get available metrics
description: >-
  Use the data by Store endpoint to retrieve sales and other data points grouped by SKU and store ID / name. This data set is updated on a weekly basis. This data is often used when more granular data is required for tasks like field team work.
get:
  summary: Return data by Store
  parameters:
    - in: query
      name: type
      required: true
      schema:
        type: string
        enum:
          - sku
          - store
      example: sku
      description: Return data at a SKU or store level
    - $ref: ../components/parameters/retailer.yaml
    - in: query
      name: timeframe
      required: true
      schema:
        type: string
        enum:
          - weekly
          - monthly
      example: weekly
      description: >
        Return data by week
    - in: query
      name: metric
      required: true
      schema:
        type: string
        enum:
          - units
          - revenue
          - wastage
          - stock
          - lost_sales
      description: >
        Which metric(s) should be returned. Multiple metrics can be returned in one request when separated by a comma. E.g. `metric=revenue,units,stock`
        

        **Note:** Not all metrics will be
        available depending on retailer/timeframe/type selections. In addition, multiple metrics must be separated by a single comma. Spaces and other characters can prevent the data from returning correctly.
      example: wastage
    - $ref: ../components/parameters/datefrom.yaml
    - $ref: ../components/parameters/dateto.yaml
    - $ref: ../components/parameters/filter.yaml
    - $ref: ../components/parameters/viewby.yaml 
  description:  >-
    Use the data by Store endpoint to retrieve sales and other data points grouped by SKU and store ID / name. This data set is updated on a weekly basis. This data is often used when more granular data is required for tasks like field team work.
  operationId: ''
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../components/schemas/dataStore.yaml
    default:
      description: 'Error'
      content:
        application/json:
          schema:
            $ref: ../components/schemas/errorServer.yaml
  tags:
    - Data
